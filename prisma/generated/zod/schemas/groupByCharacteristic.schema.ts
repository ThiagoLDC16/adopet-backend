import type { Prisma } from '@prisma/client';
import * as z from 'zod';
import { CharacteristicWhereInputObjectSchema as CharacteristicWhereInputObjectSchema } from './objects/CharacteristicWhereInput.schema';
import { CharacteristicOrderByWithAggregationInputObjectSchema as CharacteristicOrderByWithAggregationInputObjectSchema } from './objects/CharacteristicOrderByWithAggregationInput.schema';
import { CharacteristicScalarWhereWithAggregatesInputObjectSchema as CharacteristicScalarWhereWithAggregatesInputObjectSchema } from './objects/CharacteristicScalarWhereWithAggregatesInput.schema';
import { CharacteristicScalarFieldEnumSchema } from './enums/CharacteristicScalarFieldEnum.schema';
import { CharacteristicCountAggregateInputObjectSchema as CharacteristicCountAggregateInputObjectSchema } from './objects/CharacteristicCountAggregateInput.schema';
import { CharacteristicMinAggregateInputObjectSchema as CharacteristicMinAggregateInputObjectSchema } from './objects/CharacteristicMinAggregateInput.schema';
import { CharacteristicMaxAggregateInputObjectSchema as CharacteristicMaxAggregateInputObjectSchema } from './objects/CharacteristicMaxAggregateInput.schema';
import { CharacteristicAvgAggregateInputObjectSchema as CharacteristicAvgAggregateInputObjectSchema } from './objects/CharacteristicAvgAggregateInput.schema';
import { CharacteristicSumAggregateInputObjectSchema as CharacteristicSumAggregateInputObjectSchema } from './objects/CharacteristicSumAggregateInput.schema';

export const CharacteristicGroupBySchema: z.ZodType<Prisma.CharacteristicGroupByArgs> = z.object({ where: CharacteristicWhereInputObjectSchema.optional(), orderBy: z.union([CharacteristicOrderByWithAggregationInputObjectSchema, CharacteristicOrderByWithAggregationInputObjectSchema.array()]).optional(), having: CharacteristicScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(CharacteristicScalarFieldEnumSchema), _count: z.union([ z.literal(true), CharacteristicCountAggregateInputObjectSchema ]).optional(), _min: CharacteristicMinAggregateInputObjectSchema.optional(), _max: CharacteristicMaxAggregateInputObjectSchema.optional(), _avg: CharacteristicAvgAggregateInputObjectSchema.optional(), _sum: CharacteristicSumAggregateInputObjectSchema.optional() }).strict() as unknown as z.ZodType<Prisma.CharacteristicGroupByArgs>;

export const CharacteristicGroupByZodSchema = z.object({ where: CharacteristicWhereInputObjectSchema.optional(), orderBy: z.union([CharacteristicOrderByWithAggregationInputObjectSchema, CharacteristicOrderByWithAggregationInputObjectSchema.array()]).optional(), having: CharacteristicScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(CharacteristicScalarFieldEnumSchema), _count: z.union([ z.literal(true), CharacteristicCountAggregateInputObjectSchema ]).optional(), _min: CharacteristicMinAggregateInputObjectSchema.optional(), _max: CharacteristicMaxAggregateInputObjectSchema.optional(), _avg: CharacteristicAvgAggregateInputObjectSchema.optional(), _sum: CharacteristicSumAggregateInputObjectSchema.optional() }).strict();